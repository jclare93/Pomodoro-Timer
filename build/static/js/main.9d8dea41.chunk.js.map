{"version":3,"sources":["pomodoro/PlayPauseStop.js","utils/class-names/index.js","utils/duration/index.js","pomodoro/Break.js","pomodoro/Focus.js","pomodoro/SessionTimer.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["PlayPauseStop","classNameToBoolean","playPause","isTimerRunning","handleStopClick","session","className","role","aria-label","type","data-testid","title","onClick","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","disabled","minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","Break","breakDuration","setBreakDuration","Focus","focusDuration","setFocusDuration","SessionTimer","aria","label","givenSeconds","seconds","round","secondsToDuration","timeRemaining","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","nextTick","prevState","max","Pomodoro","useState","setIsTimerRunning","setSession","setAria","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","nextState","prevStateSession","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d8dea41.chunk.js","sourcesContent":["import React from \"react\";\nimport classNames from \"../utils/class-names\"\n\nfunction PlayPauseStop({playPause, isTimerRunning, handleStopClick, session}){\nreturn (\n    <div className=\"col\">\n        <div\n        className=\"btn-group btn-group-lg mb-2\"\n        role=\"group\"\n        aria-label=\"Timer controls\"\n        >\n            <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            data-testid=\"play-pause\"\n            title=\"Start or pause timer\"\n            onClick={playPause}\n            >\n                <span\n                className={classNames({\n                    oi: true,\n                    \"oi-media-play\": !isTimerRunning,\n                    \"oi-media-pause\": isTimerRunning,\n                    })}\n                />\n            </button>\n                {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n                {/* TODO: Disable the stop button when there is no active session */}\n            <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"stop\"\n                title=\"Stop the session\"\n                onClick = {handleStopClick}\n                disabled = {!session}\n            >\n                <span className=\"oi oi-media-stop\" />\n            </button>\n        </div>\n    </div>\n)\n}\n\nexport default PlayPauseStop","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\nimport { minutesToDuration} from \"../utils/duration\";\n\nfunction Break({session, breakDuration, setBreakDuration }){\nreturn(\n    <div className=\"float-right\">\n        <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-break\">\n                Break Duration: {minutesToDuration(breakDuration)}\n            </span>\n            <div className=\"input-group-append\">\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n            <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  data-testid=\"decrease-break\"\n                  onClick = {() => {\n                      if (!session && breakDuration >1)\n                      minutesToDuration(setBreakDuration(breakDuration - 1))\n                  }}\n            >\n                  <span className=\"oi oi-minus\" />\n            </button>\n                {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n            <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"increase-break\"\n                onClick = {() => {\n                    if (!session && breakDuration < 15)\n                    minutesToDuration(setBreakDuration(breakDuration + 1))\n                }}\n            >\n                <span className=\"oi oi-plus\" />\n            </button>\n            </div>\n        </div>\n    </div>\n)\n}\n\nexport default Break;","import React from \"react\";\nimport { minutesToDuration, } from \"../utils/duration\";\n\n\n\nfunction Focus({focusDuration, setFocusDuration, session}) {\nreturn(\n    <div className=\"input-group input-group-lg mb-2\">\n        <span className=\"input-group-text\" data-testid=\"duration-focus\">\n            {/* TODO: Update this text to display the current focus session duration */}\n            Focus Duration: {minutesToDuration(focusDuration)} \n        </span>\n        <div className=\"input-group-append\">\n        {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n            <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            data-testid=\"decrease-focus\"\n            onClick = {() => {\n                if (!session && focusDuration>5)\n                minutesToDuration(setFocusDuration(focusDuration-5))\n            }}\n            >\n            <span className=\"oi oi-minus\" />\n            </button>\n            {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\n            <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            data-testid=\"increase-focus\"\n            onClick = {() => {\n                if (!session && focusDuration <60)\n                minutesToDuration(setFocusDuration(focusDuration + 5))\n            }}\n            >\n            <span className=\"oi oi-plus\" />\n            </button>\n        </div>\n    </div>\n)\n}\n\nexport default Focus;","import React from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\n\nfunction SessionTimer({session, focusDuration, breakDuration, aria}){\n\n    return (\n        <div>\n            {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n            {session && (<div className= \"row mb-2\">\n            <div className=\"col\">\n                {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n                <h2 data-testid=\"session-title\">\n                {(session.label === \"Focusing\")  \n                    ? `${session.label} for ${minutesToDuration(focusDuration)} minutes`\n                    : `${session.label} for ${minutesToDuration(breakDuration)} minutes`\n                }\n                </h2>\n                {/* TODO: Update message below correctly format the time remaining in the current session */}\n                <p className=\"lead\" data-testid=\"session-sub-title\">\n                {secondsToDuration(session.timeRemaining)} remaining\n                </p>\n            </div>\n            </div>)}\n            {session && (<div className=\"row mb-2\">\n            <div className=\"col\">\n                <div className=\"progress\" style={{ height: \"20px\" }}>\n                <div\n                    className=\"progress-bar\"\n                    role=\"progressbar\"\n                    aria-valuemin=\"0\"\n                    aria-valuemax=\"100\"\n                    aria-valuenow= {aria} // TODO: Increase aria-valuenow as elapsed time increases\n                    style={{ width: `${aria}%` }} // TODO: Increase width % as elapsed time increases\n                />\n                </div>\n            </div>\n            </div>)}\n        </div>\n    )\n} \n\nexport default SessionTimer;","import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport PlayPauseStop from \"./PlayPauseStop\";\nimport Break from \"./Break.js\";\nimport Focus from \"./Focus.js\";\nimport SessionTimer from \"./SessionTimer.js\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  const [aria, setAria] = useState(0)\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  const handleStopClick = () => {\n  setFocusDuration(25)\n  setBreakDuration(5)\n  setIsTimerRunning(false)\n  setSession(null)\n  }\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        setSession(nextSession(focusDuration, breakDuration));\n      }\n      setSession(nextTick);\n      if (session.label === \"Focusing\") {\n        setAria((((focusDuration*60) - session.timeRemaining)/(focusDuration*60))*100)\n      }else {setAria((((breakDuration*60)- session.timeRemaining)/(breakDuration*60))*100)}\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className = \"col\">\n        <Focus focusDuration= {focusDuration} setFocusDuration = {setFocusDuration} session = {session} />\n        </div>\n        <div className = \"col\">\n        <Break session = {session} breakDuration = {breakDuration} setBreakDuration = {setBreakDuration} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <PlayPauseStop playPause = {playPause} isTimerRunning = {isTimerRunning} handleStopClick = {handleStopClick} session = {session}/>\n      </div>\n      <SessionTimer setSession= {setSession} session = {session} breakDuration = {breakDuration} focusDuration = {focusDuration} nextTick = {nextTick} aria = {aria}/>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}